pipeline {
 
 
  agent any

 
  stages {
          stage ("Build Project") {
               steps {
	                    build 'GitFocus_Angular_Codebuild'
                }  
          } 
	  stage ("Push Image") {
               steps {
	                    build 'GitFocus_Angular_Imagebuild'
                }  
          }  
          stage('Approval') {            
               steps {
                    script {
		                          timeout (time: 2, unit: 'MINUTES') {
                                      def deploymentDelay = input id: 'Deploy', message: 'Push Image to DockerHub?', submitter: 'admin', parameters: [choice(choices: ['0', '1', '2', '3'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                                     sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
		                          }
                     }
                }    
           }
           stage('Deploy in Cluster') {
            steps {
                 script {
                     withCredentials([string(credentialsId: 'ArgoCD_Token', keyFileVariable: 'keyFile', passphraseVariable: '', usernameVariable: 'ubuntu')]) {
                     echo keyFile
                     print 'keyFile=' + keyFile
                     print 'keyFileContent=' + readFile(keyFile)
                     def remote = [name: 'GITFocusCICD', host: 'ec2-13-126-255-41.ap-south-1.compute.amazonaws.com', identityFile : keyFile, user: 'ubuntu', allowAnyHosts: true]
                     sh 'ls -l'
                     sshCommand remote: remote, command: "ls -l"   
                     /* sshPut remote: remote, from: './AngularDeployment.yaml', into: './gitfocusapp'
                     sshCommand remote: remote, command: "kubectl create -f ./gitfocusapp/AngularDeployment.yaml"
                     sshCommand remote: remote, command: "kubectl set image deployment/gitui-deployment gitui-container=gitui-deployment:$BUILD_NUMBER" */
                     
                     }
                 }
            }
        }
   }
    post {
          always {
		  cleanWs()
	           /*emailext body:'''${DEFAULT_CONTENT}''',
                           recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                           subject:''' ${DEFAULT_SUBJECT}'''*/
         }  
   }
}
